{"kind":"Notebook","sha256":"dd13f5fc28a2f9f6cc91d597911c3d9a5ad8a24543d737f99535e292b3f43065","slug":"test","location":"/test.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","language":"python","display_name":"Python 3 (ipykernel)"},"authors":[{"nameParsed":{"literal":"Jason Manassa","given":"Jason","family":"Manassa"},"name":"Jason Manassa","orcid":"0000-0001-5167-5989","corresponding":true,"email":"jmanassa@umich.edu","affiliations":["Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Miti Shah","given":"Miti","family":"Shah"},"name":"Miti Shah","orcid":"0000-0002-2142-7295","corresponding":false,"email":"mitis@umich.edu","affiliations":["Department of Nuclear Engineering and Radiological Sciences, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Min Gee Cho","given":"Min Gee","family":"Cho"},"name":"Min Gee Cho","orcid":"0000-0003-4490-7352","corresponding":false,"email":"mgcho@lbl.gov","affiliations":["Department of Materials Science and Engineering, University of California at Berkeley, Berkeley, CA, USA","National Center for Electron Microscopy, Molecular Foundry, Lawrence Berkeley National Laboratory, Berkeley, CA, USA"],"id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Zichao Wendy Di","given":"Zichao Wendy","family":"Di"},"name":"Zichao Wendy Di","orcid":"0000-0002-4131-9363","corresponding":false,"email":"wendydi@anl.gov","affiliations":["Mathematics and Computer Science Division, Argonne National Laboratory, Lemont, IL, USA"],"id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Yi Jiang","given":"Yi","family":"Jiang"},"name":"Yi Jiang","orcid":"0000-0002-2807-1324","corresponding":false,"email":"yjiang@anl.gov","affiliations":["Advanced Photon Source Facility, Argonne National Laboratory, Lemont, IL, USA"],"id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Jeffrey Fessler","given":"Jeffrey","family":"Fessler"},"name":"Jeffrey Fessler","orcid":"0000-0001-9998-3315","corresponding":false,"email":"fessler@umich.edu","affiliations":["Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Yu-Tsun Shao","given":"Yu-Tsun","family":"Shao"},"name":"Yu-Tsun Shao","orcid":"0000-0002-5574-0490","corresponding":false,"email":"yutsunsh@usc.edu","affiliations":["Mork Family Department of Chemical Engineering and Materials Science, University of Southern California, Los Angeles, California, USA"],"id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Mary Scott","given":"Mary","family":"Scott"},"name":"Mary Scott","orcid":"0000-0002-9543-6725","corresponding":false,"email":"mary.scott@berkeley.edu","affiliations":["Department of Materials Science and Engineering, University of California at Berkeley, Berkeley, CA, USA","National Center for Electron Microscopy, Molecular Foundry, Lawrence Berkeley National Laboratory, Berkeley, CA, USA"],"id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Jonathan Schwartz","given":"Jonathan","family":"Schwartz"},"name":"Jonathan Schwartz","orcid":"0000-0002-8063-6951","corresponding":true,"email":"jtschwar@gmail.com","affiliations":["Chan Zuckerberg Imaging Institute, 3400 Bridge Parkway, Redwood City, CA 94065, USA"],"id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Robert Hovden","given":"Robert","family":"Hovden"},"name":"Robert Hovden","orcid":"0000-0002-3403-8803","corresponding":true,"email":"hovden@umich.edu","affiliations":["Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-9"}],"date":"2024-6-28","subject":"Tutorial","keywords":["STEM","HAADF","EELS","EDX","Fused Multi-Modal"],"affiliations":[{"id":"Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA","name":"Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA"},{"id":"Department of Nuclear Engineering and Radiological Sciences, University of Michigan, Ann Arbor, MI, USA","name":"Department of Nuclear Engineering and Radiological Sciences, University of Michigan, Ann Arbor, MI, USA"},{"id":"Department of Materials Science and Engineering, University of California at Berkeley, Berkeley, CA, USA","name":"Department of Materials Science and Engineering, University of California at Berkeley, Berkeley, CA, USA"},{"id":"National Center for Electron Microscopy, Molecular Foundry, Lawrence Berkeley National Laboratory, Berkeley, CA, USA","name":"National Center for Electron Microscopy, Molecular Foundry, Lawrence Berkeley National Laboratory, Berkeley, CA, USA"},{"id":"Mathematics and Computer Science Division, Argonne National Laboratory, Lemont, IL, USA","name":"Mathematics and Computer Science Division, Argonne National Laboratory, Lemont, IL, USA"},{"id":"Advanced Photon Source Facility, Argonne National Laboratory, Lemont, IL, USA","name":"Advanced Photon Source Facility, Argonne National Laboratory, Lemont, IL, USA"},{"id":"Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA","name":"Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA"},{"id":"Mork Family Department of Chemical Engineering and Materials Science, University of Southern California, Los Angeles, California, USA","name":"Mork Family Department of Chemical Engineering and Materials Science, University of Southern California, Los Angeles, California, USA"},{"id":"Chan Zuckerberg Imaging Institute, 3400 Bridge Parkway, Redwood City, CA 94065, USA","name":"Chan Zuckerberg Imaging Institute, 3400 Bridge Parkway, Redwood City, CA 94065, USA"}],"abbreviations":{"DOI":"digital object identifier","FFT":"fast Fourier transform","HAADF":"high angle annular dark field","EELS":"elastic energy loss spectroscopy","EDX":"energy-dispersive x-ray spectroscopy","EDS":"energy-dispersive x-ray spectroscopy","MM":"multi-modal","TV":"total variation","GP":"gradient projection method","FGP":"fast gradient projection method","STEM":"scanning transmission electron microscopy","SNR":"signal-to-noise ratio","tif":"tag image file format"},"exports":[{"format":"ipynb","filename":"test.ipynb","url":"/test-550ec0c4e042c9d8915a1a0884d8e1a4.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import data.fusion_utils as utils\nfrom scipy.sparse import spdiags\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm \nimport numpy as np","key":"swjawd6jlW"},{"type":"output","id":"TsJxI-w9fp9c9asdKhZrD","data":[],"key":"QOzvkjNvfd"}],"key":"YX6OHwyqTH"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"data = np.load('data/PTO_Trilayer_dataset.npz')\n# Define element names and their atomic weights\nelem_names=['Sc', 'Dy', 'O']\nelem_weights=[21,66,8]\n# Parse elastic HAADF data and inelastic chemical maps based on element index from line above\nHAADF = data['HAADF']\nxx = np.array([],dtype=np.float32)\nfor ee in elem_names:\n\n\t# Read Chemical Map for Element \"ee\"\n\tchemMap = data[ee]\n\n    # Check if chemMap has the same dimensions as HAADF\n\tif chemMap.shape != HAADF.shape:\n\t\traise ValueError(f\"The dimensions of {ee} chemical map do not match HAADF dimensions.\")\n\t\n\t# Set Noise Floor to Zero and Normalize Chemical Maps\n\tchemMap -= np.min(chemMap); chemMap /= np.max(chemMap)\n\n\t# Concatenate Chemical Map to Variable of Interest\n\txx = np.concatenate([xx,chemMap.flatten()])","key":"mEWUiDwvyk"},{"type":"output","id":"8t67WTlOlPdB8TjE0qf6F","data":[],"key":"qpV0hQTWO9"}],"key":"s849Gh7tZ7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Make Copy of Raw Measurements for Poisson Maximum Likelihood Term \nxx0 = xx.copy()\n\n# Incoherent linear imaging for elastic scattering scales with atomic number Z raised to γ  ∈ [1.4, 2]\ngamma = 1.6 \n\n# Image Dimensions\n(nx, ny) = chemMap.shape; nPix = nx * ny\nnz = len(elem_names)\n\n# C++ TV Min Regularizers\nreg = utils.tvlib(nx,ny)\n\n# Data Subtraction and Normalization \nHAADF -= np.min(HAADF); HAADF /= np.max(HAADF)\nHAADF=HAADF.flatten()\n\n# Create Summation Matrix\nA = utils.create_weighted_measurement_matrix(nx,ny,nz,elem_weights,gamma,1)","key":"sjq0OB0w6I"},{"type":"output","id":"anc7TVTj56PfGbUyr_yTr","data":[],"key":"Lk3vtjMNuQ"}],"key":"suUG43unPs"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(2,len(elem_names)+1,figsize=(12,8))\nax = ax.flatten()\nax[0].imshow(HAADF.reshape(nx,ny),cmap='gray'); ax[0].set_title('HAADF'); ax[0].axis('off')\nax[1+len(elem_names)].imshow(HAADF.reshape(nx,ny)[70:130,25:85],cmap='gray'); ax[1+len(elem_names)].set_title('HAADF Cropped'); ax[1+len(elem_names)].axis('off')\n\nfor ii in range(len(elem_names)):\n    ax[ii+1].imshow(xx0[ii*(nx*ny):(ii+1)*(nx*ny)].reshape(nx,ny),cmap='gray'); ax[ii+1].set_title(elem_names[ii]); ax[ii+1].axis('off')\n    ax[ii+2+len(elem_names)].imshow(xx0[ii*(nx*ny):(ii+1)*(nx*ny)].reshape(nx,ny)[70:130,25:85],cmap='gray'); ax[ii+2+len(elem_names)].set_title(elem_names[ii]+' Cropped'); ax[ii+2+len(elem_names)].axis('off')\nplt.show()","key":"qcvmENPZaR"},{"type":"output","id":"8Pz3-YFtJ_HOiH2_vZ0zG","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"019f97998f4f5cc27b1f3bc86e7d42ab","path":"/019f97998f4f5cc27b1f3bc86e7d42ab.png"},"text/plain":{"content":"<Figure size 1200x800 with 8 Axes>","content_type":"text/plain"}}}],"key":"XWzSnxcmtt"}],"key":"VKvIwx9tfJ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display\nfrom tqdm.notebook import tqdm\n\n# Initial Convergence Parameters\nlambdaHAADF = 1 / nz  # Do not modify this\nlambdaChem_default = 0.08\nlambdaTV_default = 0.15  # Typically between 0.001 and 1\nnIter_default = 30  # Typically 10-15 will suffice\nbkg = 2.4e-1\n\n# FGP TV Parameters\nregularize = True\nnIter_TV_default = 3\n\n# xx represents the flattened 1D elastic maps we are trying to improve via the cost function\nxx = xx0.copy()\n\n# Auxiliary Functions for measuring the cost functions\nlsqFun = lambda inData: 0.5 * np.linalg.norm(A.dot(inData ** gamma) - HAADF) ** 2\npoissonFun = lambda inData: np.sum(xx0 * np.log(inData + 1e-8) - inData)\n\n# Widgets for the parameters\nlambdaChem_slider = widgets.FloatSlider(value=lambdaChem_default, min=0.001, max=1.0, step=0.001, description='Chemical Map weight (lambdaChem)')\nlambdaTV_slider = widgets.FloatSlider(value=lambdaTV_default, min=0.001, max=1.0, step=0.001, description='Total Variation weight (lambdaTV)')\nnIter_slider = widgets.IntSlider(value=nIter_default, min=10, max=50, step=1, description='Number of Data Fusion iterations (nIter)')\nnIter_TV_slider = widgets.IntSlider(value=nIter_TV_default, min=1, max=10, step=1, description='Number of TV iterations (nIter_TV)')\n\n# Function to update plots\ndef update_plots(lambdaChem, lambdaTV, nIter, nIter_TV):\n    xx = xx0.copy()\n    costHAADF = np.zeros(nIter, dtype=np.float32)\n    costChem = np.zeros(nIter, dtype=np.float32)\n    costTV = np.zeros(nIter, dtype=np.float32)\n    \n    for kk in tqdm(range(nIter)):\n        # Solve for the first two optimization functions $\\Psi_1$ and $\\Psi_2$\n        xx -= gamma * spdiags(xx ** (gamma - 1), [0], nz * nx * ny, nz * nx * ny) * lambdaHAADF * A.transpose() * (A.dot(xx ** gamma) - HAADF) + lambdaChem * (1 - xx0 / (xx + bkg))\n\n        # Enforce positivity constraint\n        xx[xx < 0] = 0\n\n        # FGP Regularization if turned on\n        if regularize:\n            for zz in range(nz):\n                xx[zz * nPix:(zz + 1) * nPix] = reg.fgp_tv(xx[zz * nPix:(zz + 1) * nPix].reshape(nx, ny), lambdaTV, nIter_TV).flatten()\n                # Measure TV Cost Function\n                costTV[kk] += reg.tv(xx[zz * nPix:(zz + 1) * nPix].reshape(nx, ny))\n\n        # Measure $\\Psi_1$ and $\\Psi_2$ Cost Functions\n        costHAADF[kk] = lsqFun(xx)\n        costChem[kk] = poissonFun(xx)\n    \n    # Display Cost Functions and Descent Parameters\n    utils.plot_convergence(costHAADF, lambdaHAADF, costChem, lambdaChem, costTV, lambdaTV)\n    \n    # Show Reconstructed Signal\n    fig, ax = plt.subplots(2, len(elem_names) + 1, figsize=(12, 8))\n    ax = ax.flatten()\n    ax[0].imshow((A.dot(xx ** gamma)).reshape(nx, ny), cmap='gray')\n    ax[0].set_title('HAADF')\n    ax[0].axis('off')\n    ax[1 + len(elem_names)].imshow((A.dot(xx ** gamma)).reshape(nx, ny)[70:130, 25:85], cmap='gray')\n    ax[1 + len(elem_names)].set_title('HAADF Cropped')\n    ax[1 + len(elem_names)].axis('off')\n\n    for ii in range(len(elem_names)):\n        ax[ii + 1].imshow(xx[ii * (nx * ny):(ii + 1) * (nx * ny)].reshape(nx, ny), cmap='gray')\n        ax[ii + 1].set_title(elem_names[ii])\n        ax[ii + 1].axis('off')\n        ax[ii + 2 + len(elem_names)].imshow(xx[ii * (nx * ny):(ii + 1) * (nx * ny)].reshape(nx, ny)[70:130, 25:85], cmap='gray')\n        ax[ii + 2 + len(elem_names)].set_title(elem_names[ii] + ' Cropped')\n        ax[ii + 2 + len(elem_names)].axis('off')\n    \n    plt.show()\n\n# Interact function to update plots dynamically\nwidgets.interact(update_plots, lambdaChem=lambdaChem_slider, lambdaTV=lambdaTV_slider, nIter=nIter_slider, nIter_TV=nIter_TV_slider)\n","identifier":"app:tutorialone-code","enumerator":"1","html_id":"app-tutorialone-code","key":"touyrRmA97"},{"type":"output","id":"h3mbJ_fu1pDdZExXeZE46","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"4edd74d47f9f422aa192e5c96f4d76a3\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"interactive(children=(FloatSlider(value=0.08, description='Chemical Map weight (lambdaChem)', max=1.0, min=0.0…","content_type":"text/plain"}}},{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"<function __main__.update_plots(lambdaChem, lambdaTV, nIter, nIter_TV)>","content_type":"text/plain"}}}],"identifier":"app:tutorialone-output","html_id":"app-tutorialone-output","key":"y8Yt440sfD"}],"identifier":"app:tutorialone","label":"app:tutorialone","html_id":"app-tutorialone","key":"Cb1yCuLkub"}],"key":"Q8pN6085MN"},"references":{"cite":{"order":[],"data":{}}}}