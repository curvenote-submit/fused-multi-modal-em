{"kind":"Notebook","sha256":"89bc11da6c8a9022832f3cafba5043cba5d0bea4e22f0db65809650323b73503","slug":"code-copy","location":"/02_code copy.md","dependencies":[],"frontmatter":{"title":"Code Tutorial","numbering":{"enumerator":{"template":"4.%s"}},"kernelspec":{"name":"python3","language":"python","display_name":"Python 3"},"jupytext":{"formats":"md:myst","text_representation":{"extension":".md","format_name":"myst"}},"authors":[{"nameParsed":{"literal":"Jason Manassa","given":"Jason","family":"Manassa"},"name":"Jason Manassa","orcid":"0000-0001-5167-5989","corresponding":true,"email":"jmanassa@umich.edu","affiliations":["Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Miti Shah","given":"Miti","family":"Shah"},"name":"Miti Shah","orcid":"0000-0002-2142-7295","corresponding":false,"email":"mitis@umich.edu","affiliations":["Department of Nuclear Engineering and Radiological Sciences, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Zichao Wendy Di","given":"Zichao Wendy","family":"Di"},"name":"Zichao Wendy Di","orcid":"0000-0002-4131-9363","corresponding":false,"email":"wendydi@anl.gov","affiliations":["Mathematics and Computer Science Division, Argonne National Laboratory, Lemont, IL, USA"],"id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Yi Jiang","given":"Yi","family":"Jiang"},"name":"Yi Jiang","orcid":"0000-0002-2807-1324","corresponding":false,"email":"yjiang@anl.gov","affiliations":["Advanced Photon Source Facility, Argonne National Laboratory, Lemont, IL, USA"],"id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Jeffrey Fessler","given":"Jeffrey","family":"Fessler"},"name":"Jeffrey Fessler","orcid":"0000-0001-9998-3315","corresponding":false,"email":"jtschwar@gmail.com","affiliations":["Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Yu-Tsun Shao","given":"Yu-Tsun","family":"Shao"},"name":"Yu-Tsun Shao","orcid":"0000-0002-5574-0490","corresponding":false,"email":"yutsunsh@usc.edu","affiliations":["Mork Family Department of Chemical Engineering and Materials Science, University of Southern California, Los Angeles, California, USA"],"id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Jonathan Schwartz","given":"Jonathan","family":"Schwartz"},"name":"Jonathan Schwartz","orcid":"0000-0002-8063-6951","corresponding":true,"email":"jtschwar@gmail.com","affiliations":["Chan Zuckerberg Imaging Institute, 3400 Bridge Parkway, Redwood City, CA 94065, USA"],"id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Robert Hovden","given":"Robert","family":"Hovden"},"name":"Robert Hovden","orcid":"0000-0002-3403-8803","corresponding":true,"email":"hovden@umich.edu","affiliations":["Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA"],"id":"contributors-myst-generated-uid-7"}],"date":"2024-3-20","subject":"Tutorial","keywords":["STEM","HAADF","EELS","EDX","Fused Multi-Modal"],"affiliations":[{"id":"Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA","name":"Department of Materials Science and Engineering, University of Michigan, Ann Arbor, MI, USA"},{"id":"Department of Nuclear Engineering and Radiological Sciences, University of Michigan, Ann Arbor, MI, USA","name":"Department of Nuclear Engineering and Radiological Sciences, University of Michigan, Ann Arbor, MI, USA"},{"id":"Mathematics and Computer Science Division, Argonne National Laboratory, Lemont, IL, USA","name":"Mathematics and Computer Science Division, Argonne National Laboratory, Lemont, IL, USA"},{"id":"Advanced Photon Source Facility, Argonne National Laboratory, Lemont, IL, USA","name":"Advanced Photon Source Facility, Argonne National Laboratory, Lemont, IL, USA"},{"id":"Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA","name":"Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA"},{"id":"Mork Family Department of Chemical Engineering and Materials Science, University of Southern California, Los Angeles, California, USA","name":"Mork Family Department of Chemical Engineering and Materials Science, University of Southern California, Los Angeles, California, USA"},{"id":"Chan Zuckerberg Imaging Institute, 3400 Bridge Parkway, Redwood City, CA 94065, USA","name":"Chan Zuckerberg Imaging Institute, 3400 Bridge Parkway, Redwood City, CA 94065, USA"}],"abbreviations":{"DOI":"digital object identifier","FFT":"fast Fourier transform","HAADF":"high angle annular dark field","EELS":"elastic energy loss spectroscopy","EDX":"energy-dispersive x-ray spectroscopy","EDS":"energy-dispersive x-ray spectroscopy","MM":"multi-modal","TV":"total variation","GP":"gradient projection method","FGP":"fast gradient projection method","STEM":"scanning transmission electron microscopy","SNR":"signal-to-noise ratio","tif":"tag image file format"},"thumbnail":"/Figure_3_Convergence-c03588701ccc4b039a301b2ce8072bbf.png","thumbnailOptimized":"/Figure_3_Convergence-c03588701ccc4b039a301b2ce8072bbf.webp","exports":[{"format":"md","filename":"02_code copy.md","url":"/02_code copy-1ee6e701295f83bc70be47821479bc7d.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Guided Computation of Fused Multi-Modal Electron Microscopy","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"dDOPS6Zjiz"}],"identifier":"guided-computation-of-fused-multi-modal-electron-microscopy","label":"Guided Computation of Fused Multi-Modal Electron Microscopy","html_id":"guided-computation-of-fused-multi-modal-electron-microscopy","implicit":true,"key":"InPziY4UZc"},{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Step 1: Python Imports","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"MFTN7ZXyxK"}],"key":"Rhecyt2NiH"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"First, we import standard python packages alongside our custom class of functions for data fusion called ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"JWr0tD8x3R"},{"type":"link","url":"https://github.com/jtschwar/Multi-Modal-2D-Data-Fusion/blob/170fea3292da7e6390bfff7236610eb0c8077ff7/EDX/fusion_utils.py","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"fusion_utils","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"YNIaeoQKTZ"}],"urlSource":"https://github.com/jtschwar/Multi-Modal-2D-Data-Fusion/blob/170fea3292da7e6390bfff7236610eb0c8077ff7/EDX/fusion_utils.py","data":{"kind":"file","org":"jtschwar","repo":"Multi-Modal-2D-Data-Fusion","reference":"170fea3292da7e6390bfff7236610eb0c8077ff7","file":"EDX/fusion_utils.py","raw":"https://raw.githubusercontent.com/jtschwar/Multi-Modal-2D-Data-Fusion/170fea3292da7e6390bfff7236610eb0c8077ff7/EDX/fusion_utils.py"},"internal":false,"protocol":"github","key":"efebNxCJF3"},{"type":"text","value":". The fusion_utils package contains 3 functions and a class of ","key":"itejy83Sy3"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"O87NNccL5N"}],"key":"LNZSZNIqt3"},{"type":"text","value":" functions: save_data, plot_convergence, create_weighted_measurement_matrix, and tvlib. The save_data function saves the fused images into .","key":"IhKwW0HF39"},{"type":"abbreviation","title":"tag image file format","children":[{"type":"text","value":"tif","key":"IumcFT2tsD"}],"key":"inMPTNZorN"},{"type":"text","value":" files and all the parameters and matrix data into a .h5 file. Plot_convergence plots the convergence of the cost functions. Create_weighted_measurement_matrix creates the summation matrix relating the elemental weights ","key":"mTZSmw6lAq"},{"type":"inlineMath","value":"Z","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>","key":"OpN10BhGAM"},{"type":"text","value":" and ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"mhKgailVGj"},{"type":"text","value":"Î³","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"MNA4cIhi5O"},{"type":"text","value":" as described by the first term in the cost function. Finally, the class of functions called tvlib performs the Fast Gradient Project (","key":"kdT8b0aCav"},{"type":"abbreviation","title":"fast gradient projection method","children":[{"type":"text","value":"FGP","key":"MXU714XDG5"}],"key":"hxQigbWuig"},{"type":"text","value":") method of ","key":"urK4tLdEOQ"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"Rhu3Y8WXJ3"}],"key":"HhXKUjfRgm"},{"type":"text","value":" image denoising, which deblurs output images while preserving edges.","key":"QkIudHMRlT"}],"key":"IxPY1SANbR"}],"key":"DN6uox961L"}],"key":"H6KxeXtf2R"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse import spdiags\nimport matplotlib.pyplot as plt\nimport fusion_utils as utils\nfrom tqdm import tqdm \nimport numpy as np","key":"fWgZysrJpD"},{"type":"output","id":"p0nhZZyzKn6filD8tTOvz","data":[],"key":"btXjgJ00xQ"}],"data":{},"key":"zwoeZi3Fgu"},{"type":"block","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Step 2: Load your data","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"lTBgjLgS54"}],"key":"jgQk4Jxuxq"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Load your inelastic and elastic data. Define the element names and their corresponding atomic weights. For the sake of this tutorial I use a .npz file, but for .dm3,.dm4,.emd, or another EM file format, just extract the 2D image data into matrices.  Your elastic data should be stored in the ","key":"Gs2YY1oG21"},{"type":"abbreviation","title":"high angle annular dark field","children":[{"type":"text","value":"HAADF","key":"BkzfQMSnJQ"}],"key":"JsL1O5tLuF"},{"type":"text","value":" variable, and your inelastic data (","key":"yMhXpOYEHp"},{"type":"abbreviation","title":"energy-dispersive x-ray spectroscopy","children":[{"type":"text","value":"EDX","key":"tnqVsfJVvP"}],"key":"fL3jJoVDUu"},{"type":"text","value":"/","key":"wIBgm61A0k"},{"type":"abbreviation","title":"elastic energy loss spectroscopy","children":[{"type":"text","value":"EELS","key":"HGz0EHAjtF"}],"key":"YiurbtfL0e"},{"type":"text","value":") should be stored in the edsMap variable.","key":"aZwPkKJFle"}],"key":"TrADNZM4LN"}],"key":"kihsndRzze"}],"key":"lXHdrKlj2i"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"data = np.load('PTO_Trilayer_dataset.npz')\n# Define element names and their atomic weights\nelem_names=['Sc', 'Dy', 'O']\nelem_weights=[21,66,8]\n# Parse elastic HAADF data and inelastic chemical maps based on element index from line above\nHAADF = data['HAADF']\nxx = np.array([],dtype=np.float32)\nfor ee in elem_names:\n\n\t# Read Chemical Map for Element \"ee\"\n\tedsMap = data[ee]\n\n\t# Set Noise Floor to Zero and Normalize Chemical Maps\n\tedsMap -= np.min(edsMap); edsMap /= np.max(edsMap)\n\n\t# Concatenate Chemical Map to Variable of Interest\n\txx = np.concatenate([xx,edsMap.flatten()])","key":"JjyCLBKWDh"},{"type":"output","id":"7fB678cP1pe6Gsc0U-PX1","data":[],"key":"tKrxUA3BIX"}],"data":{},"key":"aipx0uf8rQ"},{"type":"block","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Step 3: Reshape your data","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"fQhrsc3SRZ"}],"key":"a281iCli8I"},{"type":"paragraph","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"children":[{"type":"text","value":"Run the following cell without changing anything.  This cell reshapes your data and peforms the summation operation outlined in the cost function which is described in the Mathematical Methods section.","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"key":"IIU3LevhvQ"}],"key":"AD8vQ7SNWz"}],"key":"fUgJsQtjiw"},{"type":"admonition","kind":"danger","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Danger!","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"tH6kWpffZd"}],"key":"jW19j7Y0Wh"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"Do not change the code below.","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"tgRwDfsd8p"}],"key":"qkCtaOvAVZ"}],"key":"U48ynJ3u6m"}],"key":"UjktPmP99U"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Make Copy of Raw Measurements for Poisson Maximum Likelihood Term \nxx0 = xx.copy()\n\ngamma = 1.6 # Don't change this parameter from 1.6\n\n# Image Dimensions\n(nx, ny) = edsMap.shape; nPix = nx * ny\nnz = len(elem_names)\n\n# C++ TV Min Regularizers\nreg = utils.tvlib(nx,ny)\n\n# Data Subtraction and Normalization \nHAADF -= np.min(HAADF); HAADF /= np.max(HAADF)\nHAADF=HAADF.flatten()\n\n# Create Summation Matrix\nA = utils.create_weighted_measurement_matrix(nx,ny,nz,elem_weights,gamma,1)","key":"aS1XeHbKac"},{"type":"output","id":"ZujOJ_ksA6Ab66uJqcGTj","data":[],"key":"pwZpuXVNtd"}],"data":{},"key":"aN11jyXrzi"},{"type":"block","children":[{"type":"admonition","class":"tip ","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Optional","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"WhiQo65Ojo"}],"key":"dGsAPNGFDq"},{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"Plot your raw elastic/inelastic data","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"yN8c5cQKxz"}],"key":"xZa2GxkLrS"}],"key":"wcUEafigNj"}],"key":"qXyXZubIUw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(2,len(elem_names)+1,figsize=(12,8))\nax = ax.flatten()\nax[0].imshow(HAADF.reshape(nx,ny),cmap='gray'); ax[0].set_title('HAADF'); ax[0].axis('off')\nax[1+len(elem_names)].imshow(HAADF.reshape(nx,ny)[70:130,25:85],cmap='gray'); ax[1+len(elem_names)].set_title('HAADF Cropped'); ax[1+len(elem_names)].axis('off')\n\nfor ii in range(len(elem_names)):\n    ax[ii+1].imshow(xx0[ii*(nx*ny):(ii+1)*(nx*ny)].reshape(nx,ny),cmap='gray'); ax[ii+1].set_title(elem_names[ii]); ax[ii+1].axis('off')\n    ax[ii+2+len(elem_names)].imshow(xx0[ii*(nx*ny):(ii+1)*(nx*ny)].reshape(nx,ny)[70:130,25:85],cmap='gray'); ax[ii+2+len(elem_names)].set_title(elem_names[ii]+' Cropped'); ax[ii+2+len(elem_names)].axis('off')\nplt.show()","key":"Ubu7i5IspY"},{"type":"output","id":"usUSFTEmsjJGCcdr50RHF","data":[],"key":"LGvPMwRFjb"}],"data":{},"key":"WY6gCu5RR3"},{"type":"block","children":[{"type":"admonition","children":[{"type":"paragraph","children":[{"type":"text","value":"Step 4: Fine tune your weights for each of the three parts of the cost function. The first weight, labeled as lambda","key":"WRSgb33h5S"},{"type":"abbreviation","title":"high angle annular dark field","children":[{"type":"text","value":"HAADF","key":"uWcsmr8R3V"}],"key":"kbsfH5cpiA"},{"type":"text","value":", luckily does not need tuning since it is ideal as the inverse of the number of elements.  The second weight, labeled as lambdaChem, is our data consistency term and we typically find to be ideal between 0.05 and 0.3 although the total range for this term is 0 to 1. The final weight is lambda","key":"YFoUuJ8j30"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"QDrABrlxFy"}],"key":"m4Li8iKhSa"},{"type":"text","value":" and it dictates how strong our Total Variation denoising is. In order to preserve fine features while removing noise, we find that a <0.2 lambda","key":"n1awUFOIg1"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"S1Azgm6JnQ"}],"key":"PQ4iOnRJH3"},{"type":"text","value":" value is ideal. nIter is the number of iterations the cost function will run for. although we typically see convergence within 10 iterations, we recommend using 30 iterations to make sure convergence is met long term. the variable bkg represents the background and we use this number to perform minor background subtraction to try and reduce noise; we recommend keeping this variable small. Finally, we give the user the option to turn the ","key":"UDAZfjXKcI"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"UiDhh0IpUN"}],"key":"Mhf6wSqMDV"},{"type":"text","value":" regularization off, and define a nIter_","key":"GldeXZX2k5"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"TOSOA57Cns"}],"key":"yO7WvCO5Ro"},{"type":"text","value":" variable to define the number of iterations the ","key":"k8DdH2beoT"},{"type":"abbreviation","title":"fast gradient projection method","children":[{"type":"text","value":"FGP","key":"RdbF1bfFeh"}],"key":"wWjiUL6Npw"},{"type":"text","value":" ","key":"bjjgfWOtHa"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"CSPO96aqds"}],"key":"fEUBw8jYXL"},{"type":"text","value":" algorithm should run for.","key":"fxQBadaNWq"}],"key":"TYjgH5V4UN"}],"key":"IG4CWJOUG0"}],"key":"lPewXSz2yG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Convergence Parameters\nlambdaHAADF = 1/nz # Do not modify this\nlambdaChem = 0.08\nlambdaTV = 0.15; #Typically between 0.001 and 1\nnIter = 30 # Typically 10-15 will suffice\nbkg = 2.4e-1\n\n# FGP TV Parameters\nregularize = True; nIter_TV = 3;","key":"PHAo1F0sZF"},{"type":"output","id":"ogWf-Gp1yU027SgJvKq70","data":[],"key":"gtO44MJAGn"}],"data":{},"key":"CxX7MTlqyJ"},{"type":"block","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Step 5: Run the Fused Multi-Modal algorithm","position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"key":"FM7hTPRKQn"}],"key":"cye31DKYV5"},{"type":"paragraph","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"children":[{"type":"text","value":"Run the algorithm and use the output cost functions to determine if the weights you chose previously allow for convergence.  If you do not see convergence for one or more of the cost functions, tune the associated lambda value for that function.  For example, if the lambdaCHEM cost function does not show convergence, try change the lambdaCHEM value to something lower.  Repeat until all 3 cost functions show convergence.","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"f9oaLQrqgs"}],"key":"ErI8j7sffA"}],"key":"BkMX46yW9z"},{"type":"admonition","kind":"danger","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Danger!","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"VceOjAfErS"}],"key":"ejEYw2cAum"},{"type":"paragraph","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"children":[{"type":"text","value":"Do not change the code below.","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"VU1BFegNCD"}],"key":"JMI7waN6cC"}],"key":"PPE7I2Cgfu"}],"key":"PPwmxGGcFi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"xx = xx0.copy()\n\n# Auxiliary Functions\nlsqFun = lambda inData : 0.5 * np.linalg.norm(A.dot(inData**gamma) - HAADF) **2\npoissonFun = lambda inData : np.sum(xx0 * np.log(inData + 1e-8) - inData)\n\n# Main Loop\ncostHAADF = np.zeros(nIter,dtype=np.float32); costChem = np.zeros(nIter, dtype=np.float32); costTV = np.zeros(nIter, dtype=np.float32);\nfor kk in tqdm(range(nIter)):\n\t# HAADF Update\n\txx -=  gamma * spdiags(xx**(gamma - 1), [0], nz*nx*ny, nz*nx*ny) * lambdaHAADF * A.transpose() * (A.dot(xx**gamma) - HAADF) + lambdaChem * (1 - xx0 / (xx + bkg))\n\txx[xx<0] = 0\n\n\t# Regularization \n\tif regularize:\n\t\tfor zz in range(nz):\n\t\t\txx[zz*nPix:(zz+1)*nPix] = reg.fgp_tv( xx[zz*nPix:(zz+1)*nPix].reshape(nx,ny), lambdaTV, nIter_TV).flatten()\n\t\t\tcostTV[kk] += reg.tv( xx[zz*nPix:(zz+1)*nPix].reshape(nx,ny) )\n\t\t\t\n\t# Measure Cost Function\n\tcostHAADF[kk] = lsqFun(xx); costChem[kk] = poissonFun(xx)","key":"oqvj16x3w2"},{"type":"output","id":"5iHp_gXQiKjP0Lug0zE_H","data":[],"key":"OHrUs6GgJC"}],"data":{},"key":"BgsIqgaK4O"},{"type":"block","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Step 6: Assess Convergence","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"WiqGPD0JpG"}],"key":"F8z6pDwi2E"},{"type":"paragraph","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"Assess Convergence by confirming that all 3 cost functions adequately converge like the example plot show below.  You should see all three curves start high and exponentially decay into a plateau where no change is seen.","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"tUOH936wgz"}],"key":"fG72rbvvw0"}],"key":"cVowYi4tGO"},{"type":"container","kind":"figure","identifier":"convergence","label":"convergence","children":[{"type":"image","url":"/Figure_3_Convergence-c03588701ccc4b039a301b2ce8072bbf.png","alt":"Convergence of 3 subparts of the multi-modal cost function.  The top plot represents the first term that is dictated by \\lambda_{HAADF}.  The middle plot represents the second term that is dictated by \\lambda_{Chem}. The bottom plot represents the third TV term that is dictated by \\lambda_{TV}.","width":"700px","data":{"altTextIsAutoGenerated":true},"key":"SnNhCeq1cu","urlSource":"./figs/Figure_3_Convergence.png","urlOptimized":"/Figure_3_Convergence-c03588701ccc4b039a301b2ce8072bbf.webp"},{"type":"caption","children":[{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"captionNumber","kind":"figure","label":"convergence","identifier":"convergence","html_id":"convergence","enumerator":"4.1","children":[{"type":"text","value":"FigureÂ ","key":"FNuzyFHwNv"},{"type":"text","value":"4.1","key":"fgE9EPDLIh"},{"type":"text","value":":","key":"jRVb94UZbl"}],"template":"FigureÂ %s:","key":"XRMZy6X5Yn"},{"type":"text","value":"Convergence of 3 subparts of the multi-modal cost function.  The top plot represents the first term that is dictated by ","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"CG0DH7gPDi"},{"type":"inlineMath","value":"\\lambda_{HAADF}","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Î»</mi><mrow><mi>H</mi><mi>A</mi><mi>A</mi><mi>D</mi><mi>F</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_{HAADF}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Î»</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal mtight\">AA</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">â</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"AiqfMocuxN"},{"type":"text","value":".  The middle plot represents the second term that is dictated by ","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"j2BmkwvtUx"},{"type":"inlineMath","value":"\\lambda_{Chem}","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Î»</mi><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>m</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_{Chem}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Î»</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">â</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"Se3AS76LdM"},{"type":"text","value":". The bottom plot represents the third ","key":"vmHworSVLm"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"DnPnN748Qq"}],"key":"LpV2Fk5TO1"},{"type":"text","value":" term that is dictated by ","key":"Axm0OLDyuH"},{"type":"inlineMath","value":"\\lambda_{TV}","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Î»</mi><mrow><mi>T</mi><mi>V</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_{TV}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Î»</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span><span class=\"vlist-s\">â</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"v2A5fUMVgf"},{"type":"text","value":".","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"rHFjNbu50e"}],"key":"WdMrqDvvoX"}],"key":"ny0woXqrYl"}],"enumerator":"4.1","html_id":"convergence","key":"EtP8lysY66"},{"type":"admonition","class":"attention","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Be careful with ","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"dUE643kOgW"},{"type":"inlineMath","value":"\\lambda_{TV}","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Î»</mi><mrow><mi>T</mi><mi>V</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_{TV}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Î»</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span><span class=\"vlist-s\">â</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"eCqqQU2JEd"},{"type":"text","value":"!","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"CTaGULRpaW"}],"key":"Yni6W9PIob"},{"type":"paragraph","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"You may see convergence with an over or under weighted ","key":"cGTAYX0P6I"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"lB0NlU2eKn"}],"key":"JKyqGP4DdA"},{"type":"text","value":" term.  Under weighting the ","key":"A8fgmiebAe"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"FzFUeH8iXo"}],"key":"ubOW1QpbCt"},{"type":"text","value":" term results in noisy reconstructions, while over weighting results in blurring and loss of features in the image.  Below is an example of the output images from under, over, and just right ","key":"Z2h7sWTNAu"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"qVuUmy0cBS"}],"key":"hKxIcyGDQC"},{"type":"text","value":" weights.","key":"xFiNr1sQz6"}],"key":"xvXxv6eazu"}],"key":"rIDICKkiYf"},{"type":"container","kind":"figure","identifier":"tv_weights","label":"TV_weights","children":[{"type":"image","url":"/Figure_4_TV-460d92c235812892fc46e4d1d64de126.png","alt":"Comparison of TV weighting across different chemistries and HAADF. Too low of a TV results in noise and artifacts across images.  Proper TV preserves fine features like the dumbell shape of the Dy particles, while reducing noise.  High TV oversmoothes the image resulting in loss of important features for analysis.","width":"700px","data":{"altTextIsAutoGenerated":true},"key":"KqtjGrsyiW","urlSource":"./figs/Figure_4_TV.png","urlOptimized":"/Figure_4_TV-460d92c235812892fc46e4d1d64de126.webp"},{"type":"caption","children":[{"type":"paragraph","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"captionNumber","kind":"figure","label":"TV_weights","identifier":"tv_weights","html_id":"tv-weights","enumerator":"4.2","children":[{"type":"text","value":"FigureÂ ","key":"cqqklMSJ1E"},{"type":"text","value":"4.2","key":"op2KrZn4RK"},{"type":"text","value":":","key":"lGIbAolh1G"}],"template":"FigureÂ %s:","key":"TdZu2GYAVY"},{"type":"text","value":"Comparison of ","key":"omnjS0sMEh"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"GKg4ELKZ2t"}],"key":"pJSuIcBlbA"},{"type":"text","value":" weighting across different chemistries and ","key":"r3Y8WlDuQj"},{"type":"abbreviation","title":"high angle annular dark field","children":[{"type":"text","value":"HAADF","key":"CYgoPgwU7A"}],"key":"PhaEjemRd7"},{"type":"text","value":". Too low of a ","key":"W25dichltD"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"vlh3m8M9ko"}],"key":"qxnWGI2Icx"},{"type":"text","value":" results in noise and ar","key":"Q5LU5aPgEz"},{"type":"abbreviation","title":"tag image file format","children":[{"type":"text","value":"tif","key":"rrsprRCuNY"}],"key":"RDyJO3uOig"},{"type":"text","value":"acts across images.  Proper ","key":"N8wMWstL2i"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"g6dRcEbYLe"}],"key":"goW8XAYkaA"},{"type":"text","value":" preserves fine features like the dumbell shape of the Dy particles, while reducing noise.  High ","key":"FT6G6mZelS"},{"type":"abbreviation","title":"total variation","children":[{"type":"text","value":"TV","key":"azR3BATlhJ"}],"key":"YE5WjRQyB2"},{"type":"text","value":" oversmoothes the image resulting in loss of important features for analysis.","key":"cZ8DYU08q9"}],"key":"DkCDMaDLYv"}],"key":"Nt8ur1cnPI"}],"enumerator":"4.2","html_id":"tv-weights","key":"tQtDli7GyQ"}],"key":"d5Dy8tWAmy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Display Cost Functions and Descent Parameters\nutils.plot_convergence(costHAADF, lambdaHAADF, costChem, lambdaChem, costTV, lambdaTV)\n# Show Reconstructed Signal\nfig, ax = plt.subplots(2,len(elem_names)+1,figsize=(12,8))\nax = ax.flatten()\nax[0].imshow((A.dot(xx**gamma)).reshape(nx,ny),cmap='gray'); ax[0].set_title('HAADF'); ax[0].axis('off')\nax[1+len(elem_names)].imshow((A.dot(xx**gamma)).reshape(nx,ny)[70:130,25:85],cmap='gray'); ax[1+len(elem_names)].set_title('HAADF Cropped'); ax[1+len(elem_names)].axis('off')\n\nfor ii in range(len(elem_names)):\n    ax[ii+1].imshow(xx[ii*(nx*ny):(ii+1)*(nx*ny)].reshape(nx,ny),cmap='gray'); ax[ii+1].set_title(elem_names[ii]); ax[ii+1].axis('off')\n    ax[ii+2+len(elem_names)].imshow(xx[ii*(nx*ny):(ii+1)*(nx*ny)].reshape(nx,ny)[70:130,25:85],cmap='gray'); ax[ii+2+len(elem_names)].set_title(elem_names[ii]+' Cropped'); ax[ii+2+len(elem_names)].axis('off')\nplt.show()","key":"PFUQfke7Il"},{"type":"output","id":"BWFUUBy66QKNYH1oppysm","data":[],"key":"yqT4QiMbuf"}],"data":{},"key":"nDisCzCm25"},{"type":"block","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Step 7: Save your data","position":{"start":{"line":181,"column":1},"end":{"line":181,"column":1}},"key":"XCCUXOQP5N"}],"key":"MhEI59bbYJ"},{"type":"paragraph","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"text","value":"Define the folder you would like to save to. The output images and data will be saved to .","key":"AC3YBaoMDW"},{"type":"abbreviation","title":"tag image file format","children":[{"type":"text","value":"tif","key":"YhyblRPNIy"}],"key":"o55Jwebh0h"},{"type":"text","value":" and .h5 file formats","key":"VBy1DBykkh"}],"key":"RRYC9CbNMa"}],"key":"VwcQpXPYgZ"}],"key":"pmkRChjAcP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"save_folder_name='test'\nutils.save_data(save_folder_name, xx0, xx, HAADF, A.dot(xx**gamma), elem_names, nx, ny, costHAADF, costChem, costTV, lambdaHAADF, lambdaChem, lambdaTV, gamma)","key":"O1S3nyMxiP"},{"type":"output","id":"C0wCe0o3FNYfepo67QjTk","data":[],"key":"MRgL1fx5Hc"}],"data":{},"key":"jztKLAOXN4"}],"key":"bUHGmJtwpU"},"references":{"cite":{"order":[],"data":{}}}}